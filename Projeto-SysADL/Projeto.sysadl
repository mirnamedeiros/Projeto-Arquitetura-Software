Model SysADLModel ; using SysADL.components.SMARTPHONECP ; using SysADL.components.TAGCP ; package SysADL.types { value type Int { } value type Boolean { } value type String { } value type Void { } value type Real { } value type LocalId { } value type NdefPayload { } value type AudioRef { } value type QrCodeData { } value type Listaint { } datatype PadraoHaptico { attributes : pulsos_ms : Listaint ; } datatype AssinaturaPayload { attributes : id : LocalId ; schema : Int ; validoAte : String ; sig : String ; } datatype Detalhes { attributes : nome : String ; bloco : String ; andar : String ; acessibilidades : ListaString ; observacoes : String ; contatos : ListaString ; } value type ListaString { } datatype Rota { attributes : passos : ListaString ; } value type Timestamp { } datatype AuditoriaEvento { attributes : id : Int ; ts : Timestamp ; ^action : String ; resultado : String ; recurso : String ; responsavel : Int ; } datatype Notificacao { attributes : id : Int ; ts : Timestamp ; titulo : String ; mensagem : String ; } } package SysADL.ports { import SysADL.types ; port def TagNdefOPT { flow out AssinaturaPayload } port def NFCNdefIPT { flow in AssinaturaPayload } port def QrScanIPT { flow in QrCodeData } port def DetalhesOPT { flow out Detalhes } port def RotaOPT { flow out Rota } port def AudioOPT { flow out AudioRef } port def HapticoOPT { flow out PadraoHaptico } port def LocalIdIPT { flow in LocalId } port def LocalIdOPT { flow out LocalId } port def AuditoriaOPT { flow out AuditoriaEvento } port def NotificacaoIPT { flow in Notificacao } } package SysADL.connectors { import SysADL.ports ; connector def NFCLinkCN { participants : ~ ^do : TagNdefOPT ; ~ di : NFCNdefIPT ; flows : AssinaturaPayload from do to di } connector def QrResolveCN { participants : ~ di : QrScanIPT ; ~ ^do : LocalIdIPT ; flows : QrCodeData from di to do } connector def VarificarExtrairCN { participants : ~ di : NFCNdefIPT ; ~ ^do : LocalIdIPT ; flows : AssinaturaPayload from di to do } connector def AnuncioHaptico { participants : ~ ^do : DetalhesOPT ; ~ di : HapticoOPT ; flows : Detalhes from do to di } connector def BuscarDetalhesCN { participants : ~ ^do : LocalIdOPT ; ~ di : DetalhesOPT ; flows : LocalId from do to di } connector def GerarRotaCN { participants : ~ ^do : LocalIdOPT ; ~ di : RotaOPT ; flows : LocalId from do to di } connector def AnunciosCN { participants : ~ ^do : DetalhesOPT ; ~ di : AudioOPT ; flows : Detalhes from do to di } } package SysADL.components { import SysADL.ports ; import SysADL.connectors ;
	component def SMARTPHONECP { ports : nfecNdef : NFCNdefIPT ; qr : QrScanIPT ; detalhes : DetalhesOPT ; rota : RotaOPT ; audio : AudioOPT ; audioHaptico : HapticoOPT ; auditoria : AuditoriaOPT ; notificacao : NotificacaoIPT ; configuration { } } boundary
	component def TAGCP { ports : tag : TagNdefOPT ; } boundary
	component def BackendApiCP { } boundary
	component def CDN_TTSSvcCP { } boundary
	component def NotificationBroker { } } Requirement AvisosContextuaisRF ( 8 ) { text = "O sistema deve emitir alertas sobre manutenção/obstáculos que afetem rotas" derive AcessibilidadeRNF , RotasSimplesRF ; } Requirement RotasSimplesRF ( 7 ) { text = "O sistema deve fornecer instruções curtas priorizando caminhos acessíveis e seguros entre dois pontos" derive BuscaRapidaRF ; } Requirement BuscaRapidaRF ( 6 ) { text = "O sistema deve oferecer busca com autocompletar por nome/código do local" derive ConsultarDetalhesLocalRF ; } Requirement ConsultarDetalhesLocalRF ( 5 ) { text = "Dado um identificador válido, o sistema deve apresentar nome do local, bloco/andar, acessibilidades, observações e contatos" satisfied by SysADL.components.SMARTPHONECP ; derive IdentificacaoNfcRF ; } Requirement IdentificacaoNfcRF ( 1 ) { text = "O sistema deve identificar o local por leitura de uma tag NFC posicionada no ponto tátil" Requirement OperacaoOfflineRNF ( 4 ) { text = "Sem internet, o app deve exibir/anunciar o nome curto gravado na tag e usar cache local quando disponível" derive TimeoutERetentativasRNF ; } Requirement LerTagNfcRF ( 2 ) { text = "O app deve ler UID e/ou payload NDEF e extrair o identificador do local" satisfied by SysADL.components.SMARTPHONECP , SysADL.components.TAGCP ; derive LatenciaAppRespostaRNF , CompatibilidadeDispositivosRNF ; } Requirement AnuncioVozRF ( 3 ) { text = "Após a leitura, o app deve emitir feedback háptico e sonoro e disponibilizar botão “Repetir”" satisfied by SysADL.components.SMARTPHONECP ; derive LatenciaAppRespostaRNF ; } } Requirement AuditoriaRF ( 13 ) { text = "O sistema deve registrar usuário/dispositivo, data/hora e ação executada (leitura, consulta, alteração)" derive GerirTagsELocaisRF ; } Requirement ProvisionamentoTagsRF ( 10 ) { text = "O sistema deve gerar payloads de tag contendo ID do local, versão do esquema, validade e checksum/assinatura" satisfied by SysADL.components.TAGCP ; derive GerirTagsELocaisRF ; } Requirement GerirConteudoAudioRF ( 11 ) { text = "O sistema deve cadastrar/gerar áudios (incl. TTS) e publicá-los em storage/CDN para reprodução" derive GerirTagsELocaisRF ; } Requirement GerirTagsELocaisRF ( 9 ) { text = "Administradores devem criar/editar locais, gerar payloads e registrar status de implantação/substituição" } Requirement NotificacoesRF ( 12 ) { text = "O sistema deve enviar notificações (push/SMS/e-mail) quando houver alterações relevantes de local/rota" derive GerirTagsELocaisRF ; } Requirement BleQRRedundantesRF ( 14 ) { text = "Oferecer leitura alternativa por BLE e por QR quando NFC estiver indisponível no dispositivo/ambiente" satisfied by SysADL.components.SMARTPHONECP ; derive IdentificacaoNfcRF.LerTagNfcRF ; } Requirement AcessibilidadeRNF ( 15 ) { text = "TalkBack/VoiceOver, tamanhos dinâmicos, contraste adequado" } Requirement CompatibilidadeDispositivosRNF ( 16 ) { text = "Suportar Android 10+ (NFC) e iOS 13+ (NDEF), idioma padrão PT-BR" satisfied by SysADL.components.SMARTPHONECP ; } Requirement TimeoutERetentativasRNF ( 17 ) { text = "Aplicar timeout de 2 s para chamadas remotas, até 2 retentativas com backoff e circuit-breaker após falhas sucessivas" } Requirement LatenciaAppRespostaRNF ( 18 ) { text = "Responder em ≤300 ms quando em cache e em ≤2 s quando via servidor" derive TimeoutERetentativasRNF ; }